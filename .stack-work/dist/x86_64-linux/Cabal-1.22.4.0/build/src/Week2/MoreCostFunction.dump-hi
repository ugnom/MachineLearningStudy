
==================== FINAL INTERFACE ====================
2016-02-17 01:56:35.502916 UTC

interface Machi_CNwdqNQ21MrLKFQxwEedkV:Week2.MoreCostFunction 7102
  interface hash: 824c839aebd0e72b44cc1611a717afa8
  ABI hash: 1b16fec58bc56043d7ab52a9bb6b571f
  export-list hash: a74d625205f8c90b5b4eeab8b77e39c9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 683e1459417d540b466d61115025b878
  sig of: Nothing
  used TH splices: False
  where
exports:
  Week2.MoreCostFunction.composeDataSets
  Week2.MoreCostFunction.costFunction
  Week2.MoreCostFunction.descentOne
  Week2.MoreCostFunction.errorf
  Week2.MoreCostFunction.f
  Week2.MoreCostFunction.gradientDescent
  Week2.MoreCostFunction.Parameter{Week2.MoreCostFunction.Parameter Week2.MoreCostFunction.t0 Week2.MoreCostFunction.t1}
  Week2.MoreCostFunction.TrainingSet{Week2.MoreCostFunction.TrainingSet Week2.MoreCostFunction.x Week2.MoreCostFunction.y}
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP*
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP:System.Random 043afd3a72ee464fc1e36264f990a1de
23e5da7041ec3d16837480622857b105
  $fShowParameter :: GHC.Show.Show Week2.MoreCostFunction.Parameter
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Week2.MoreCostFunction.Parameter
                  Week2.MoreCostFunction.$fShowParameter_$cshowsPrec
                  Week2.MoreCostFunction.$fShowParameter_$cshow
                  Week2.MoreCostFunction.$fShowParameter_$cshowList -}
23e5da7041ec3d16837480622857b105
  $fShowParameter1 ::
    Week2.MoreCostFunction.Parameter -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Week2.MoreCostFunction.Parameter ->
                 case w of ww { Week2.MoreCostFunction.Parameter ww1 ww2 ->
                 Week2.MoreCostFunction.$w$cshowsPrec 0 ww1 ww2 }) -}
946f43706fa39f925805f0cfa7905e0c
  $fShowParameter2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
0ab81955c007104e85e6e001145830ab
  $fShowParameter3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "t1 = "#) -}
3612f0d688ebbbdcd4883fb69999fc01
  $fShowParameter4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
35c30c1367915b57fd3706da7f03ccbf
  $fShowParameter5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "t0 = "#) -}
a338c054859c6011eedb104ec77d0122
  $fShowParameter6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Parameter {"#) -}
99f7bd6b70ee8638037ad332c79d539c
  $fShowParameter7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
23e5da7041ec3d16837480622857b105
  $fShowParameter_$cshow ::
    Week2.MoreCostFunction.Parameter -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Week2.MoreCostFunction.Parameter ->
                 Week2.MoreCostFunction.$fShowParameter_$cshowsPrec
                   GHC.Show.shows18
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
23e5da7041ec3d16837480622857b105
  $fShowParameter_$cshowList ::
    [Week2.MoreCostFunction.Parameter] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Week2.MoreCostFunction.Parameter
                   Week2.MoreCostFunction.$fShowParameter1) -}
23e5da7041ec3d16837480622857b105
  $fShowParameter_$cshowsPrec ::
    GHC.Types.Int -> Week2.MoreCostFunction.Parameter -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Week2.MoreCostFunction.Parameter ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Week2.MoreCostFunction.Parameter ww3 ww4 ->
                 Week2.MoreCostFunction.$w$cshowsPrec ww1 ww3 ww4 } }) -}
e4871be834148c557ee51e4760d21b45
  $fShowTrainingSet ::
    GHC.Show.Show Week2.MoreCostFunction.TrainingSet
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Week2.MoreCostFunction.TrainingSet
                  Week2.MoreCostFunction.$fShowTrainingSet_$cshowsPrec
                  Week2.MoreCostFunction.$fShowTrainingSet_$cshow
                  Week2.MoreCostFunction.$fShowTrainingSet_$cshowList -}
e4871be834148c557ee51e4760d21b45
  $fShowTrainingSet1 ::
    Week2.MoreCostFunction.TrainingSet -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Week2.MoreCostFunction.TrainingSet ->
                 case w of ww { Week2.MoreCostFunction.TrainingSet ww1 ww2 ->
                 Week2.MoreCostFunction.$w$cshowsPrec1 0 ww1 ww2 }) -}
86f41684c14c0acaa15ed1159c948ed4
  $fShowTrainingSet2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y = "#) -}
ce81e1bc464e550a3ef5b9c061dfef28
  $fShowTrainingSet3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x = "#) -}
b6a4f5b1aaaf9fe3620152699cc6eb02
  $fShowTrainingSet4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TrainingSet {"#) -}
e4871be834148c557ee51e4760d21b45
  $fShowTrainingSet_$cshow ::
    Week2.MoreCostFunction.TrainingSet -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Week2.MoreCostFunction.TrainingSet ->
                 Week2.MoreCostFunction.$fShowTrainingSet_$cshowsPrec
                   GHC.Show.shows18
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e4871be834148c557ee51e4760d21b45
  $fShowTrainingSet_$cshowList ::
    [Week2.MoreCostFunction.TrainingSet] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Week2.MoreCostFunction.TrainingSet
                   Week2.MoreCostFunction.$fShowTrainingSet1) -}
e4871be834148c557ee51e4760d21b45
  $fShowTrainingSet_$cshowsPrec ::
    GHC.Types.Int
    -> Week2.MoreCostFunction.TrainingSet -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Week2.MoreCostFunction.TrainingSet ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Week2.MoreCostFunction.TrainingSet ww3 ww4 ->
                 Week2.MoreCostFunction.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
a62c191f89cc4f00dc8c084927cd5f7a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Double
                   ww2 :: GHC.Types.Double ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Week2.MoreCostFunction.$fShowParameter7
                       ww4 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Week2.MoreCostFunction.$fShowParameter7
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x1 :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Week2.MoreCostFunction.$fShowParameter6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Week2.MoreCostFunction.$fShowParameter5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Week2.MoreCostFunction.$fShowParameter4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Week2.MoreCostFunction.$fShowParameter3
                                   (f2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Week2.MoreCostFunction.$fShowParameter2
                                         x1))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x1 :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) }) -}
694838c14e51573212b3d1e0e62c9e40
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Double
                   ww2 :: GHC.Types.Double ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Week2.MoreCostFunction.$fShowParameter7
                       ww4 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Week2.MoreCostFunction.$fShowParameter7
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x1 :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Week2.MoreCostFunction.$fShowTrainingSet4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Week2.MoreCostFunction.$fShowTrainingSet3
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Week2.MoreCostFunction.$fShowParameter4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Week2.MoreCostFunction.$fShowTrainingSet2
                                   (f2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Week2.MoreCostFunction.$fShowParameter2
                                         x1))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x1 :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) }) -}
1d5195936d3ccad139dcd6ef603824bf
  $wdescentOne ::
    GHC.Types.Double
    -> [Week2.MoreCostFunction.TrainingSet]
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> (# GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Double
                   w1 :: [Week2.MoreCostFunction.TrainingSet]
                   ww :: GHC.Types.Double
                   ww1 :: GHC.Types.Double ->
                 let {
                   m :: GHC.Types.Double
                   = case GHC.List.$wlenAcc
                            @ Week2.MoreCostFunction.TrainingSet
                            w1
                            0 of ww2 { DEFAULT ->
                     GHC.Types.D# (GHC.Prim.int2Double# ww2) }
                 } in
                 (# case ww of wild { GHC.Types.D# x1 ->
                    case w of wild1 { GHC.Types.D# x2 ->
                    letrec {
                      $wgo2 :: [Week2.MoreCostFunction.TrainingSet]
                               -> GHC.Prim.Double# -> GHC.Prim.Double#
                        {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                      = \ w2 :: [Week2.MoreCostFunction.TrainingSet]
                          ww2 :: GHC.Prim.Double# ->
                        case w2 of wild2 {
                          [] -> ww2
                          : y1 ys
                          -> case ww1 of wild3 { GHC.Types.D# x3 ->
                             case y1 of wild4 { Week2.MoreCostFunction.TrainingSet ds ds1 ->
                             case ds of wild5 { GHC.Types.D# y2 ->
                             case ds1 of wild6 { GHC.Types.D# y3 ->
                             $wgo2
                               ys
                               (GHC.Prim.+##
                                  ww2
                                  (GHC.Prim.-##
                                     (GHC.Prim.+## x1 (GHC.Prim.*## x3 y2))
                                     y3)) } } } } }
                    } in
                    case $wgo2 w1 0.0 of ww2 { DEFAULT ->
                    case m of wild2 { GHC.Types.D# y1 ->
                    case GHC.Prim./## ww2 y1 of wild3 { DEFAULT ->
                    GHC.Types.D# (GHC.Prim.-## x1 (GHC.Prim.*## x2 wild3)) } } } } },
                    case ww1 of wild { GHC.Types.D# x1 ->
                    case w of wild1 { GHC.Types.D# x2 ->
                    letrec {
                      $wgo2 :: [Week2.MoreCostFunction.TrainingSet]
                               -> GHC.Prim.Double# -> GHC.Prim.Double#
                        {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                      = \ w2 :: [Week2.MoreCostFunction.TrainingSet]
                          ww2 :: GHC.Prim.Double# ->
                        case w2 of wild2 {
                          [] -> ww2
                          : y1 ys
                          -> case ww of wild3 { GHC.Types.D# x3 ->
                             case y1 of wild4 { Week2.MoreCostFunction.TrainingSet ds ds1 ->
                             case ds of wild5 { GHC.Types.D# y2 ->
                             case ds1 of wild6 { GHC.Types.D# y3 ->
                             $wgo2
                               ys
                               (GHC.Prim.+##
                                  ww2
                                  (GHC.Prim.*##
                                     (GHC.Prim.-## (GHC.Prim.+## x3 (GHC.Prim.*## x1 y2)) y3)
                                     y2)) } } } } }
                    } in
                    case $wgo2 w1 0.0 of ww2 { DEFAULT ->
                    case m of wild2 { GHC.Types.D# y1 ->
                    case GHC.Prim./## ww2 y1 of wild3 { DEFAULT ->
                    GHC.Types.D#
                      (GHC.Prim.-## x1 (GHC.Prim.*## x2 wild3)) } } } } } #)) -}
ea32ec7f8e9e31e52eece03af55a3f28
  $werrorf ::
    Week2.MoreCostFunction.Parameter
    -> [Week2.MoreCostFunction.TrainingSet] -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U(U),U(U))><S,U>,
     Inline: [0],
     Unfolding: (\ w :: Week2.MoreCostFunction.Parameter
                   w1 :: [Week2.MoreCostFunction.TrainingSet] ->
                 letrec {
                   $wgo2 :: [Week2.MoreCostFunction.TrainingSet]
                            -> GHC.Prim.Double# -> GHC.Prim.Double#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ w2 :: [Week2.MoreCostFunction.TrainingSet]
                       ww :: GHC.Prim.Double# ->
                     case w2 of wild {
                       [] -> ww
                       : y1 ys
                       -> case w of wild1 { Week2.MoreCostFunction.Parameter t2 t3 ->
                          case t2 of wild2 { GHC.Types.D# x1 ->
                          case t3 of wild3 { GHC.Types.D# x2 ->
                          case y1 of wild4 { Week2.MoreCostFunction.TrainingSet ds ds1 ->
                          case ds of wild5 { GHC.Types.D# y2 ->
                          case ds1 of wild6 { GHC.Types.D# y3 ->
                          let {
                            x3 :: GHC.Prim.Double#
                            = GHC.Prim.-## (GHC.Prim.+## x1 (GHC.Prim.*## x2 y2)) y3
                          } in
                          $wgo2 ys (GHC.Prim.+## ww (GHC.Prim.*## x3 x3)) } } } } } } }
                 } in
                 case $wgo2 w1 0.0 of ww { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ Week2.MoreCostFunction.TrainingSet
                        w1
                        0 of ww2 { DEFAULT ->
                 GHC.Prim./##
                   ww
                   (GHC.Prim.+##
                      (GHC.Prim.int2Double# ww2)
                      (GHC.Prim.int2Double# ww2)) } }) -}
18fa6556c23cfd7b23a9651906838939
  $wgo :: System.Random.StdGen -> GHC.Prim.Int# -> [GHC.Types.Double]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
29da2c0e1a4fa795afe770bda3cb381c
  $wgo1 ::
    System.Random.StdGen
    -> GHC.Prim.Int#
    -> [GHC.Types.Double]
    -> [Week2.MoreCostFunction.TrainingSet]
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
5a4732e3062bd63d4b6e7783fb860c17
  $wgradientDescent ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> [Week2.MoreCostFunction.TrainingSet]
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> (# GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,U(U)><S,U><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Double#
                   w :: GHC.Types.Double
                   w1 :: [Week2.MoreCostFunction.TrainingSet]
                   ww1 :: GHC.Types.Double
                   ww2 :: GHC.Types.Double ->
                 let {
                   lvl7 :: GHC.Types.Bool
                   = GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>## ww 0.0)
                 } in
                 letrec {
                   $winGD :: GHC.Types.Double
                             -> GHC.Types.Double -> (# GHC.Types.Double, GHC.Types.Double #)
                     {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [0] -}
                   = \ ww3 :: GHC.Types.Double ww4 :: GHC.Types.Double ->
                     case Week2.MoreCostFunction.$werrorf
                            (Week2.MoreCostFunction.Parameter ww3 ww4)
                            w1 of ww5 { DEFAULT ->
                     let {
                       up :: Week2.MoreCostFunction.Parameter
                       = case Week2.MoreCostFunction.$wdescentOne
                                w
                                w1
                                ww3
                                ww4 of ww6 { (#,#) ww7 ww8 ->
                         Week2.MoreCostFunction.Parameter ww7 ww8 }
                     } in
                     case Week2.MoreCostFunction.$werrorf up w1 of ww6 { DEFAULT ->
                     case GHC.Prim.-## ww5 ww6 of wild1 {
                       DEFAULT
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>## wild1 0.0) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>## ww (GHC.Prim.negateDouble# wild1)) of wild {
                                 GHC.Types.False
                                 -> case up of ww7 { Week2.MoreCostFunction.Parameter ww8 ww9 ->
                                    $winGD ww8 ww9 }
                                 GHC.Types.True -> (# ww3, ww4 #) }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>## ww wild1) of wild {
                                 GHC.Types.False
                                 -> case up of ww7 { Week2.MoreCostFunction.Parameter ww8 ww9 ->
                                    $winGD ww8 ww9 }
                                 GHC.Types.True -> (# ww3, ww4 #) } }
                       0.0
                       -> case lvl7 of wild {
                            GHC.Types.False
                            -> case up of ww7 { Week2.MoreCostFunction.Parameter ww8 ww9 ->
                               $winGD ww8 ww9 }
                            GHC.Types.True -> (# ww3, ww4 #) } } } }
                 } in
                 $winGD ww1 ww2) -}
23e5da7041ec3d16837480622857b105
  data Parameter
    = Parameter {t0 :: GHC.Types.Double, t1 :: GHC.Types.Double}
e4871be834148c557ee51e4760d21b45
  data TrainingSet
    = TrainingSet {x :: GHC.Types.Double, y :: GHC.Types.Double}
ef0fed87cd2111c04646404f8a658fda
  composeDataSets ::
    GHC.Types.Int -> GHC.Types.IO [Week2.MoreCostFunction.TrainingSet]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Week2.MoreCostFunction.composeDataSets1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <[Week2.MoreCostFunction.TrainingSet]>_R)) -}
8a8b30622b0b1ac5a41852dc6fdd3d58
  composeDataSets1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Week2.MoreCostFunction.TrainingSet] #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ n :: GHC.Types.Int
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.NTCo:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        ipv of ds2 { (#,#) ipv4 ipv5 ->
                 case ipv5 of b2 { System.Random.StdGen ipv6 ipv7 ->
                 (# ipv4,
                    case n of wild1 { GHC.Types.I# y1 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0 y1) of wild2 {
                      GHC.Types.False
                      -> GHC.Types.[] @ Week2.MoreCostFunction.TrainingSet
                      GHC.Types.True
                      -> Week2.MoreCostFunction.$wgo1
                           b1
                           y1
                           (Week2.MoreCostFunction.$wgo b2 y1) } } #) } } } } }) -}
488d5a60d489d821bb0bd96a92ad3346
  costFunction ::
    Week2.MoreCostFunction.Parameter
    -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Week2.MoreCostFunction.Parameter
                   eta :: GHC.Types.Double ->
                 case ds of wild { Week2.MoreCostFunction.Parameter t2 t3 ->
                 case t2 of wild1 { GHC.Types.D# x1 ->
                 case t3 of wild2 { GHC.Types.D# x2 ->
                 case eta of wild3 { GHC.Types.D# y1 ->
                 GHC.Types.D# (GHC.Prim.+## x1 (GHC.Prim.*## x2 y1)) } } } }) -}
780a27cd00e609f8a4420c3bab59aa83
  descentOne ::
    GHC.Types.Double
    -> [Week2.MoreCostFunction.TrainingSet]
    -> Week2.MoreCostFunction.Parameter
    -> Week2.MoreCostFunction.Parameter
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><S,1*U(U(U),U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Double
                   w1 :: [Week2.MoreCostFunction.TrainingSet]
                   w2 :: Week2.MoreCostFunction.Parameter ->
                 case w2 of ww { Week2.MoreCostFunction.Parameter ww1 ww2 ->
                 case Week2.MoreCostFunction.$wdescentOne
                        w
                        w1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Week2.MoreCostFunction.Parameter ww4 ww5 } }) -}
4387da5002671c68dac12a61d6743e4f
  errorf ::
    Week2.MoreCostFunction.Parameter
    -> [Week2.MoreCostFunction.TrainingSet] -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U(U),U(U))><S,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Week2.MoreCostFunction.Parameter
                   w1 :: [Week2.MoreCostFunction.TrainingSet] ->
                 case Week2.MoreCostFunction.$werrorf w w1 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
8fc8b2e3de99e49edccb145c6b8d09ae
  f :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ x1 :: GHC.Types.Double -> x1) -}
a7a13b4afb99bfa1b0755245eeea01b6
  gradientDescent ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> [Week2.MoreCostFunction.TrainingSet]
    -> Week2.MoreCostFunction.Parameter
    -> Week2.MoreCostFunction.Parameter
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U(U)><L,U(U)><S,U><S,U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Types.Double
                   w1 :: GHC.Types.Double
                   w2 :: [Week2.MoreCostFunction.TrainingSet]
                   w3 :: Week2.MoreCostFunction.Parameter ->
                 case w of ww { GHC.Types.D# ww1 ->
                 case w3 of ww2 { Week2.MoreCostFunction.Parameter ww3 ww4 ->
                 case Week2.MoreCostFunction.$wgradientDescent
                        ww1
                        w1
                        w2
                        ww3
                        ww4 of ww5 { (#,#) ww6 ww7 ->
                 Week2.MoreCostFunction.Parameter ww6 ww7 } } }) -}
e2ed7f2b1abdf72703027345d3203970
  t0 :: Week2.MoreCostFunction.Parameter -> GHC.Types.Double
  RecSel Week2.MoreCostFunction.Parameter
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Week2.MoreCostFunction.Parameter ->
                 case ds of wild { Week2.MoreCostFunction.Parameter ds1 ds2 ->
                 ds1 }) -}
7dc1547666bc4c77fbc665ce58169216
  t1 :: Week2.MoreCostFunction.Parameter -> GHC.Types.Double
  RecSel Week2.MoreCostFunction.Parameter
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Week2.MoreCostFunction.Parameter ->
                 case ds of wild { Week2.MoreCostFunction.Parameter ds1 ds2 ->
                 ds2 }) -}
9f04d6e1df33b721afcbd66add53cec2
  x :: Week2.MoreCostFunction.TrainingSet -> GHC.Types.Double
  RecSel Week2.MoreCostFunction.TrainingSet
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Week2.MoreCostFunction.TrainingSet ->
                 case ds of wild { Week2.MoreCostFunction.TrainingSet ds1 ds2 ->
                 ds1 }) -}
c306586eeb38cc978cd76192504e5fa9
  y :: Week2.MoreCostFunction.TrainingSet -> GHC.Types.Double
  RecSel Week2.MoreCostFunction.TrainingSet
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Week2.MoreCostFunction.TrainingSet ->
                 case ds of wild { Week2.MoreCostFunction.TrainingSet ds1 ds2 ->
                 ds2 }) -}
instance GHC.Show.Show [Week2.MoreCostFunction.Parameter]
  = Week2.MoreCostFunction.$fShowParameter
instance GHC.Show.Show [Week2.MoreCostFunction.TrainingSet]
  = Week2.MoreCostFunction.$fShowTrainingSet
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

